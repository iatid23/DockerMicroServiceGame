{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\ItamarAtid\\\\Desktop\\\\Demos\\\\mprest\\\\candidate\\\\devops_assignment\\\\ui\\\\src\\\\GameScreen.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\n\nfunction GameCell(props) {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      width: 120,\n      height: 120,\n      border: 'solid 1px black',\n      fontSize: 70,\n      display: 'flex',\n      alignItems: 'center',\n      justifyContent: 'center',\n      cursor: 'pointer'\n    },\n    onClick: props.onCellClick,\n    children: props.data\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 4,\n    columnNumber: 12\n  }, this);\n}\n\n_c = GameCell;\n\nfunction GameRow(props) {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      display: 'flex'\n    },\n    children: props.data.map((_, i) => /*#__PURE__*/_jsxDEV(GameCell, {\n      onCellClick: () => {\n        props.onCellClick(i);\n      },\n      data: _\n    }, i, false, {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 34\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 19,\n    columnNumber: 12\n  }, this);\n}\n\n_c2 = GameRow;\n\nfunction GameScreen(props) {\n  _s();\n\n  const [updateGameState, setUpdateGameState] = useState(0);\n  const [gameState, setGameState] = useState({});\n  useEffect(() => {\n    fetch('http://127.0.0.1:8001/get_game_state/', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        jwt: props.jwt\n      })\n    }).then(res => res.json()).then(res => {\n      // setErr(res.err)\n      // res.jwt && props.onLogin(res.jwt)\n      if (res.turn !== res.player_play && !res.is_over) {\n        setTimeout(() => setUpdateGameState(updateGameState + 1), 500);\n      }\n\n      setGameState(res);\n    });\n  }, [updateGameState]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      margin: 16\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \" Game screen \"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 9\n    }, this), gameState.board && gameState.board.map((_, i) => /*#__PURE__*/_jsxDEV(GameRow, {\n      onCellClick: j => {\n        fetch('http://127.0.0.1:8001/player_move/', {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify({\n            row: i,\n            col: j,\n            jwt: props.jwt\n          })\n        }).then(res => res.json()).then(res => {\n          setUpdateGameState(updateGameState + 1);\n        });\n      },\n      data: _\n    }, i, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 62\n    }, this)), !gameState.is_over && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\" waiting for \", gameState.turn === gameState.player_play ? \"PLAYER\" : \"CPU\", \" (\", gameState.turn, \") move\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 36\n    }, this), !!gameState.winner && /*#__PURE__*/_jsxDEV(\"h4\", {\n      children: [\" \", gameState.winner, \" win! \"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 36\n    }, this), !gameState.winner && gameState.is_over && /*#__PURE__*/_jsxDEV(\"h4\", {\n      children: \" tie! \"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 56\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: props.onBackToMainScreen,\n      children: \" Back \"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 49,\n    columnNumber: 7\n  }, this);\n}\n\n_s(GameScreen, \"RegbFVvN3QtrfCHMwX4CfewLlR8=\");\n\n_c3 = GameScreen;\nexport default GameScreen;\n\nvar _c, _c2, _c3;\n\n$RefreshReg$(_c, \"GameCell\");\n$RefreshReg$(_c2, \"GameRow\");\n$RefreshReg$(_c3, \"GameScreen\");","map":{"version":3,"sources":["C:/Users/ItamarAtid/Desktop/Demos/mprest/candidate/devops_assignment/ui/src/GameScreen.js"],"names":["React","useState","useEffect","GameCell","props","width","height","border","fontSize","display","alignItems","justifyContent","cursor","onCellClick","data","GameRow","map","_","i","GameScreen","updateGameState","setUpdateGameState","gameState","setGameState","fetch","method","headers","body","JSON","stringify","jwt","then","res","json","turn","player_play","is_over","setTimeout","margin","board","j","row","col","winner","onBackToMainScreen"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\n\nfunction GameCell(props) {\n    return <div style={{\n        width:120,\n        height:120,\n        border:'solid 1px black',\n        fontSize:70,\n        display:'flex',\n        alignItems:'center',\n        justifyContent:'center',\n        cursor:'pointer'\n    }} onClick={props.onCellClick}>\n        {props.data}\n    </div>\n}\n\nfunction GameRow(props) {\n    return <div style={{\n        display:'flex'\n    }}>\n        {props.data.map((_,i) => <GameCell onCellClick={() => {\n            props.onCellClick(i)\n        }} data={_} key={i}/>)}\n    </div>\n}\n\nfunction GameScreen(props) {\n    const [updateGameState, setUpdateGameState] = useState(0);\n    const [gameState, setGameState] = useState({});\n    useEffect(() => {\n        fetch('http://127.0.0.1:8001/get_game_state/', {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify({jwt: props.jwt})\n        }).then(res=>res.json())\n        .then(res => {\n            // setErr(res.err)\n            // res.jwt && props.onLogin(res.jwt)\n            if(res.turn !== res.player_play && !res.is_over) {\n                setTimeout(() => setUpdateGameState(updateGameState + 1),500)\n            }\n            setGameState(res)\n        });\n    },[updateGameState])\n    return (\n      <div style={{\n        margin:16\n    }}>\n        <h3> Game screen </h3>\n            {/* <p> turn:   </p> */}\n            {gameState.board && gameState.board.map((_,i) => <GameRow onCellClick={j => {\n                fetch('http://127.0.0.1:8001/player_move/', {\n                    method: 'POST',\n                    headers: {\n                        'Content-Type': 'application/json'\n                    },\n                    body: JSON.stringify({\n                        row:i, \n                        col:j,\n                        jwt: props.jwt\n                    })\n                }).then(res=>res.json())\n                .then(res => {\n                    setUpdateGameState(updateGameState + 1)\n                });\n            }} key={i} data={_}/>) }\n            {!gameState.is_over && <p> waiting for {gameState.turn === gameState.player_play ? \"PLAYER\":\"CPU\"} ({gameState.turn}) move</p>}\n            {!!gameState.winner && <h4> {gameState.winner} win! </h4>}\n            {!gameState.winner && gameState.is_over && <h4> tie! </h4>}\n        <button onClick={props.onBackToMainScreen}> Back </button>\n      </div>\n    );\n  }\n  \n  export default GameScreen;\n  "]},"metadata":{},"sourceType":"module"}